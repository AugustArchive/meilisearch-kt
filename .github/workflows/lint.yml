# üîç Meilisearch for Kotlin: Type-safe and Kotlin Coroutine-based client for Meilisearch
# Copyright (c) 2022 Noel <cutie@floofy.dev>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: Linting and Unit Testing
on:
  workflow_dispatch:
  push:
    branches:
      - 'issue/gh-**'
      - 'feat/**'
      - master

    paths-ignore:
      - '.github/**'
      - '.husky/**'
      - '.vscode/**'
      - 'assets/**'
      - 'locales/**'
      - 'docker/**'
      - '.dockerignore'
      - '.eslintignore'
      - '.gitignore'
      - '**.md'
      - 'LICENSE'
      - 'renovate.json'

  pull_request:
    branches:
      - 'issue/gh-**'
      - 'feat/**'
      - master

    paths-ignore:
      - '.github/**'
      - '.husky/**'
      - '.vscode/**'
      - 'assets/**'
      - 'locales/**'
      - 'docker/**'
      - '.dockerignore'
      - '.eslintignore'
      - '.gitignore'
      - '**.md'
      - 'LICENSE'
      - 'renovate.json'

jobs:
  lint:
    name: Linting and Unit Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [17, 18]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Let gradlew be executable
        run: chmod +x ./gradlew

      - name: Lints the repository via Spotless for any linting errors.
        run: ./gradlew spotlessCheck --no-daemon

      - name: Compiles the Kotlin sources for any compiler errors
        run: ./gradlew compileKotlin --no-daemon

      - name: Unit test the project
        run: ./gradlew test --no-daemon

      - name: Generate documentation
        run: chmod +x ./scripts/deploy-docs.sh && ./scripts/deploy-docs.sh

      - name: Check if Git repo is dirty
        id: git_status
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo '::set-output name=DIRTY::true'
          else
            echo '::set-output name=DIRTY::false'
          fi

      - name: Commit changes (if dirty)
        if: contains(steps.git_status.outputs.DIRTY, 'true')
        run: |
          git config --global user.name "Noel[bot]"
          git config --global user.email "noelbot@users.noreply.github.com"
          git config --global committer.name "Noel"
          git config --global committer.email "cutie@floofy.dev"
          
          git add .
          git commit -m "chore: update API documentation"
          git push -u origin master

      - name: Deploy docs (if dirty)
        uses: mhausenblas/mkdocs-deploy-gh-pages@master
        if: contains(steps.git_status.outputs.DIRTY, 'true')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CONFIG_FILE: ./mkdocs.yml
          EXTRA_PACKAGES: build-base
